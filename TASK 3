#include <iostream>
#include <array>
#include <limits>

// Function prototypes
void initializeBoard(std::array<std::array<char, 3>, 3>& board);
void displayBoard(const std::array<std::array<char, 3>, 3>& board);
bool makeMove(std::array<std::array<char, 3>, 3>& board, char currentPlayer);
bool checkForWin(const std::array<std::array<char, 3>, 3>& board, char currentPlayer);
bool checkForDraw(const std::array<std::array<char, 3>, 3>& board);
void switchPlayer(char& currentPlayer);
bool playAgain();

int main() {
    std::array<std::array<char, 3>, 3> board;
    char currentPlayer = 'X';

    do {
        initializeBoard(board);

        do {
            displayBoard(board);

            std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            while (!makeMove(board, currentPlayer)) {
                std::cout << "Invalid move. Try again: ";
            }

            if (checkForWin(board, currentPlayer)) {
                displayBoard(board);
                std::cout << "Player " << currentPlayer << " wins! Congratulations!\n";
                break;
            }

            if (checkForDraw(board)) {
                displayBoard(board);
                std::cout << "It's a draw!\n";
                break;
            }

            switchPlayer(currentPlayer);

        } while (true);

    } while (playAgain());

    return 0;
}

void initializeBoard(std::array<std::array<char, 3>, 3>& board) {
    for (auto& row : board) {
        for (char& cell : row) {
            cell = ' ';
        }
    }
}

void displayBoard(const std::array<std::array<char, 3>, 3>& board) {
    std::cout << "  0 1 2\n";
    for (int i = 0; i < 3; ++i) {
        std::cout << i << ' ';
        for (int j = 0; j < 3; ++j) {
            std::cout << board[i][j] << ' ';
        }
        std::cout << '\n';
    }
}

bool makeMove(std::array<std::array<char, 3>, 3>& board, char currentPlayer) {
    int row, col;
    std::cin >> row >> col;

    if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        return false;  // Invalid move
    }

    board[row][col] = currentPlayer;
    return true;
}

bool checkForWin(const std::array<std::array<char, 3>, 3>& board, char currentPlayer) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
            return true;  // Row win
        }
        if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) {
            return true;  // Column win
        }
    }

    if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
        return true;  // Diagonal win (top-left to bottom-right)
    }

    if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
        return true;  // Diagonal win (top-right to bottom-left)
    }

    return false;
}

bool checkForDraw(const std::array<std::array<char, 3>, 3>& board) {
    // Check if the board is full (no empty cells)
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') {
                return false;  // Game not a draw
            }
        }
    }
    return true;  // Game is a draw
}

void switchPlayer(char& currentPlayer) {
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}

bool playAgain() {
    char choice;
    std::cout << "Do you want to play again? (y/n): ";
    std::cin >> choice;
    return (choice == 'y' || choice == 'Y');
}
